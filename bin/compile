#!/bin/bash
# usage: bin/compile <build-dir> <cache-dir> <env-dir>

set -eo pipefail

TOOL=""
YELLOW='\033[1;33m'
NC='\033[0m' # No Color
CURL="curl -s -L --retry 15 --retry-delay 2" # retry for up to 30 seconds

# Go releases have moved to a new URL scheme
# starting with Go version 1.2.2. Return the old
# location for known old versions and the new
# location otherwise.
urlfor() {
    local ver=$1
    case $ver in
    go1.0*|go1.1beta*|go1.1rc*|go1.1|go1.1.*|go1.2beta*|go1.2rc*|go1.2|go1.2.1)
        local file=${GOFILE:-$ver.linux-amd64.tar.gz}
        echo https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/go/$file
        ;;
    devel*)
        local sha=$(echo $ver | cut -d - -f 2)  #assumes devel-<short sha> or devel-<full sha>
        echo https://github.com/golang/go/archive/$sha.tar.gz
    ;;
    *)
        local file=${GOFILE:-$ver.linux-amd64.tar.gz}
        echo https://storage.googleapis.com/golang/$file
        ;;
    esac
}

DEFAULT_GO_VERSION="go1.6"

# Expand to supported versions of Go, (e.g. expand "go1.5" to latest release go1.5.2)
# All specific or other versions, take as is.
expand_ver() {
  case $1 in
    go1.6)
      echo "go1.6.1"
      ;;
    go1.5)
      echo "go1.5.4"
      ;;
    go1.4)
      echo "go1.4.3"
      ;;
    *)
      echo "$1"
      ;;
  esac
}

# Report deprecated versions to user
# Use after expand_ver
report_ver() {
  case $1 in
    go1.6.1|go1.5.4)
      # Noop
    ;;
    devel*)
      warn ""
      warn "You are using a development build of Go."
      warn "This is provided for users requiring an unreleased Go version"
      warn "but is otherwise unsupported."
      warn ""
      warn "Build tests are NOT RUN!!"
      warn ""
    ;;
    *)
      warn ""
      warn "Deprecated or unsupported version of go ($1)"
      warn "See https://devcenter.heroku.com/articles/go-support#go-versions for supported version information."
      warn ""
    ;;
  esac
}

mkdir -p "$1" "$2"
build=$(cd "$1/" && pwd)
cache=$(cd "$2/" && pwd)
env_dir=$3
buildpack=$(cd "$(dirname $0)/.." && pwd)
arch=$(uname -m|tr A-Z a-z)
if test $arch = x86_64
then arch=amd64
fi
plat=$(uname|tr A-Z a-z)-$arch

# Python
venv=$cache/venv
mkdir -p $cache/pip
python=python2.7
PATH=$buildpack/$plat/bin:$venv/bin:$PATH
steptxt="----->"

warn() {
    echo -e >&2 "${YELLOW} !     $@${NC}"
}

step() {
    echo "$steptxt $@"
}

start() {
    echo -n "$steptxt $@... "
}

finished() {
    echo "done"
}

name=$(<$build/Godeps/Godeps.json jq -r .ImportPath)
ver=$(<$build/Godeps/Godeps.json jq -r .GoVersion)

ver=$(expand_ver $ver)
url=${GOURL:-$(urlfor $ver)}

if test -e $build/bin && ! test -d $build/bin
then
    warn ""
    warn "File bin exists and is not a directory."
    warn ""
    exit 1
fi

report_ver $ver

if test -d $cache/$ver/go
then
    step "Using $ver"
else
    rm -rf $cache/* # be sure not to build up cruft
    mkdir -p $cache/$ver
    odir=$(pwd)
    cd $cache/$ver
    start "Installing $ver"
        $CURL $url | tar zxf -
    finished
    case $ver in  # Rename 'go-<full sha>' (we have the short sha) to 'go'
      devel*)
        bver=$(expand_ver $DEFAULT_GO_VERSION)
        burl=$(urlfor $bver)
        start "Installing bootstrap Go version $bver"
            $CURL $burl | tar zxf -
        finished
        mv go bgo
        mv go-$(echo $ver | cut -d - -f 2)* go
        step "Compiling development Go version $ver..."
            cd go/src
            echo "devel +$(echo $ver | cut -d - -f 2) $(date "+%a %b %H:%M:%S %G %z")"> ../VERSION
            GOROOT_BOOTSTRAP=$(pushd $cache/$ver/bgo > /dev/null; pwd; popd > /dev/null) ./make.bash
            cd - >/dev/null
            go/bin/go version
        finished
        rm -rf bgo
      ;;
    esac
    cd $odir
fi

mkdir -p $build/bin
GOROOT=$cache/$ver/go export GOROOT
GOBIN=$build/bin export GOBIN
GOPATH=$build/.heroku/go export GOPATH
PATH=$GOROOT/bin:$PATH

p=$GOPATH/src/$name
mkdir -p $p
cp -R $build/* $p

unset GIT_DIR # unset git dir or it will mess with goinstall
cd $p
step "Running: install sh"
./tools/install.sh

rm -rf $build/.heroku

mkdir -p $build/.profile.d
echo 'PATH=$PATH:$HOME/bin' > $build/.profile.d/go.sh
cp $buildpack/vendor/concurrency.sh $build/.profile.d/